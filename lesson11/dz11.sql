------------------------------------------------------------
-- Практическое задание по теме “Оптимизация запросов”
------------------------------------------------------------

-- 1.Создайте таблицу logs типа Archive. Пусть при каждом создании записи в таблицах users, catalogs и products в таблицу logs помещается время и дата создания записи, 
-- название таблицы, идентификатор первичного ключа и содержимое поля name.

-- основу взял таблицы из ресурсов занятия 
-- дополнительно создал таблицу для логов
DROP TABLE IF EXISTS logs;
CREATE TABLE logs (
  tab_id SERIAL COMMENT 'id таблицы источника',
  tab_name VARCHAR(255) COMMENT 'Имя таблицы источника',
  name VARCHAR(255) COMMENT 'Содержимое name исходной таблицы',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Время и дата создания'
) COMMENT = 'Таблица логов' ENGINE=Archive;

-- и создал триггеры на таблицы users, catalogs и products
CREATE TRIGGER `logs_users` AFTER INSERT ON `users` FOR EACH ROW BEGIN 
	INSERT INTO logs (tab_id, tab_name, name) 
		VALUES (NEW.id, 'users', NEW.name);
END

CREATE TRIGGER `logs_prod` AFTER INSERT ON `products` FOR EACH ROW BEGIN 
	INSERT INTO logs (tab_id, tab_name, name) 
		VALUES (NEW.id, 'products', NEW.name);
END

CREATE TRIGGER `logs_cat` AFTER INSERT ON `catalogs` FOR EACH ROW BEGIN 
	INSERT INTO logs (tab_id, tab_name, name) 
		VALUES (NEW.id, 'catalogs', NEW.name);
END

-- 2.(по желанию) Создайте SQL-запрос, который помещает в таблицу users миллион записей.

-- для тестирования добавления миллиона записей я создал хранимую процедуру:
CREATE PROCEDURE shop.milion_insert()
BEGIN
	DECLARE v INT DEFAULT 0;
	WHILE v < 1000 DO
    INSERT INTO users (name, birthday_at)
          VALUES 
         ('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),
         ('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),
         .......
         ('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),
         ('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01'),('Иван','2020-01-01');
    SET v = v + 1;
  END WHILE;
END
-- на начальном этапе я попробовал вставлять в цикле каждый раз по 1 значению и постепенно увеличивал счетчик цикла
-- время линейно росло - так на 100.000 записей потребовалось уже 5м34сек, т.е. на миллион потребовалось бы около часа
-- тогда я изменил INSERT не по 1 записи а по 1.000 записей и так же для начала попробовал 100.000 записей - время составило 7,62сек
-- поэтому я уже смело попробовал запустить миллион записей - это заняло 1мин10сек
-- таким образом - одновременная вставка нескольких значений кратно сокращает время выполнения операции

------------------------------------------------------------
-- Практическое задание по теме “NoSQL”
------------------------------------------------------------

-- 1.В базе данных Redis подберите коллекцию для подсчета посещений с определенных IP-адресов.

-- Redis поддерживает команду INCR, поэтому думаю можно использовать вариант
SET 10.0.0.1 1 (или MSET 10.0.0.1 0 10.0.0.2 0 и т.д.) для первоначальной инициализации
INCR 10.0.0.1 -- увеличиваем счетчик посещений для конкретного адреса
GET 10.0.0.1  -- получаем счетчик посещений для конкретного адреса
KEYS 10.0.0.*  -- позволяет получить список адресов,с которых заходили

-- 2.При помощи базы данных Redis решите задачу поиска имени пользователя по электронному адресу и наоборот, поиск электронного адреса пользователя по его имени.

-- для такой базы как мне кажется подойдет хэш коллекции
HSET users admin admin@mail.ru
HSET users max max@mail.ru
HSET users leo leo@mail.ru

HSET email admin@mail.ru admin
HSET email max@mail.ru max
HSET email leo@mail.ru leo

-- тогда получение почты по имени будет
HGET users admin 
-- получение пользователя по почте будет
HGET email admin@mail.ru 

-- 3.Организуйте хранение категорий и товарных позиций учебной базы данных shop в СУБД MongoDB.

use shop
-- пример добавления записей
db.shop.insert({name: 'Intel Core i3-8100', desription:'Процессор для настольных персональных компьютеров, основанных на платформе Intel.', price:7890.00, catalog:'Процессоры'})
db.shop.insert({name: 'Intel Core i5-7400', desription:'Процессор для настольных персональных компьютеров, основанных на платформе Intel.', price:7890.00, catalog:'Процессоры'})
db.shop.insert({name: 'AMD FX-8320E', desription:'Процессор для настольных персональных компьютеров, основанных на платформе AMD.', price:12700.00, catalog:'Процессоры'})
db.shop.insert({name: 'AMD FX-8320', desription:'Процессор для настольных персональных компьютеров, основанных на платформе AMD.', price:4780.00, catalog:'Процессоры'})
-- или добавления и редактирования
db.shop.insert({name: 'ASUS ROG MAXIMUS X HERO', desription:'Материнская плата ASUS ROG MAXIMUS X HERO, Z370, Socket 1151-V2, DDR4, ATX'})
db.shop.update({name: 'ASUS ROG MAXIMUS X HERO'}, {$set: { price:19310.00, catalog:'Материнские платы' }})




